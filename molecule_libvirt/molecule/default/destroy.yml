---
- name: Destroy
  hosts: hypervisor
  gather_facts: false
  no_log: "{{ molecule_no_log }}"
  tasks:
    # Developer must implement.
    - name: Include defaults
      include_vars: ../../defaults/main.yml

    - name: Set Image List
      set_fact:
        image_list: "{{ molecule_yml.platforms }}"

    - name: Set OS List
      set_fact:
        os_list: |
          {{ os_list | default([]) +
            [{
              'url': images[item.os][item.version].url,
              'checksum': images[item.os][item.version].checksum | default(''),
              'filename': filename,
              'instance': item.name,
              'name': name,
              'extension': extension,
              'os': item.os,
              'kernel': images[item.os][item.version].kernel | default(''),
              'dtb': images[item.os][item.version].dtb | default(''),
              'git': images[item.os][item.version].git | default(''),
              'custom_extension': images[item.os][item.version].custom_extension | default(''),
              'version': item.version,
              'vm_ram_mb': images[item.os][item.version].vm_ram_mb | default(vm_default_ram_mb),
              'vm_vcpus': images[item.os][item.version].vm_vcpus | default(vm_default_vcpus)
            }] }}
      loop: "{{ image_list }}"
      vars:
        filename: "{{ images[item.os][item.version].url | urlsplit('path') | split('/') | last }}"
        extension: "{{ filename | split('.') | last }}"
        name: "{{ filename[0:-(extension | length + 1)] }}"

    - name: Get VMs list
      community.libvirt.virt:
        command: list_vms
      register: existing_vms
      changed_when: no

    - name: Stop vms
      community.libvirt.virt:
        name: "{{ item.instance }}"
        state: destroyed
      when: item.instance in existing_vms.list_vms
      loop: "{{ os_list }}"
      loop_control:
        label: "Stop vm '{{ item.instance }}'"

    - name: Undefine vms
      community.libvirt.virt:
        name: "{{ item.instance }}"
        command: undefine
      when: item.instance in existing_vms.list_vms
      loop: "{{ os_list }}"
      loop_control:
        label: "Undefine vm '{{ item.instance }}'"

    - name: Remove disk files of vms from libvirt pool dir
      file:
        path: "{{ libvirt_pool_dir }}/{{ item.instance }}.qcow2"
        state: absent
      become: yes
      loop: "{{ os_list }}"
      loop_control:
        label: "Remove file '{{ libvirt_pool_dir }}/{{ item.instance }}.qcow2'"

    - name: Remove configured disk file of vms
      file:
        path: "{{ folder_configured_images }}/{{ item.name }}.qcow2"
        state: absent
      become: yes
      loop: "{{ os_list }}"
      loop_control:
        label: "Remove file '{{ folder_configured_images }}/{{ item.name }}.qcow2'"

    - name: Remove base disk file of vms
      file:
        path: "{{ folder_download }}/{{ item.filename }}"
        state: absent
      become: yes
      loop: "{{ os_list }}"
      loop_control:
        label: "Remove file '{{ folder_download }}/{{ item.filename }}'"

    # Mandatory configuration for Molecule to function.

    - name: Populate instance config
      set_fact:
        instance_conf: {}

    - name: Dump instance config
      copy:
        content: |
          # Molecule managed

          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
        mode: 0600
      when: server.changed | default(false) | bool
      delegate_to: localhost
